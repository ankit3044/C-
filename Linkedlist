#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* next;
};

class LinkedList {
private:
    Node* head;
public:
    LinkedList() {
        head = nullptr;
    }

    void createList() {
        head = nullptr;
    }

    void addToBeg(int value) {
        Node* newNode = new Node;
        newNode->data = value;
        newNode->next = head;
        head = newNode;
    }

    void addAtPosition(int value, int position) {
        Node* newNode = new Node;
        newNode->data = value;
        newNode->next = nullptr;

        if (position == 1) {
            newNode->next = head;
            head = newNode;
            return;
        }

        Node* temp = head;
        for (int i = 0; i < position - 2 && temp != nullptr; ++i) {
            temp = temp->next;
        }

        if (temp == nullptr) {
            cout << "Invalid position!" << endl;
            return;
        }

        newNode->next = temp->next;
        temp->next = newNode;
    }

    void deleteElement(int value) {
        Node* temp = head;
        Node* prev = nullptr;

        if (temp != nullptr && temp->data == value) {
            head = temp->next;
            delete temp;
            return;
        }

        while (temp != nullptr && temp->data != value) {
            prev = temp;
            temp = temp->next;
        }

        if (temp == nullptr) {
            cout << "Element not found!" << endl;
            return;
        }

        prev->next = temp->next;
        delete temp;
    }

    void display() {
        Node* temp = head;
        while (temp != nullptr) {
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << endl;
    }

    int countElements() {
        int count = 0;
        Node* temp = head;
        while (temp != nullptr) {
            count++;
            temp = temp->next;
        }
        return count;
    }

    void reverseList() {
        Node* prev = nullptr;
        Node* current = head;
        Node* next = nullptr;

        while (current != nullptr) {
            next = current->next;
            current->next = prev;
            prev = current;
            current = next;
        }

        head = prev;
    }

    bool search(int value) {
        Node* temp = head;
        while (temp != nullptr) {
            if (temp->data == value)
                return true;
            temp = temp->next;
        }
        return false;
    }
};

int main() {
    LinkedList list;
    int choice, element, position;

    do {
        cout << "\n-------------------------";
        cout << "\nLinked List Operations";
        cout << "\n-------------------------";
        cout << "\n1. Create List";
        cout << "\n2. Add to Beginning";
        cout << "\n3. Add at Position";
        cout << "\n4. Delete Element";
        cout << "\n5. Display";
        cout << "\n6. Count Elements";
        cout << "\n7. Reverse List";
        cout << "\n8. Search Element";
        cout << "\n9. Exit";
        cout << "\nEnter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                list.createList();
                cout << "List created successfully!" << endl;
                break;
            case 2:
                cout << "Enter element to add at beginning: ";
                cin >> element;
                list.addToBeg(element);
                break;
            case 3:
                cout << "Enter element to add: ";
                cin >> element;
                cout << "Enter position: ";
                cin >> position;
                list.addAtPosition(element, position);
                break;
            case 4:
                cout << "Enter element to delete: ";
                cin >> element;
                list.deleteElement(element);
                break;
            case 5:
                cout << "List: ";
                list.display();
                break;
            case 6:
                cout << "Number of elements: " << list.countElements() << endl;
                break;
            case 7:
                list.reverseList();
                cout << "List reversed successfully!" << endl;
                break;
            case 8:
                cout << "Enter element to search: ";
                cin >> element;
                if (list.search(element))
                    cout << "Element found in the list!" << endl;
                else
                    cout << "Element not found in the list!" << endl;
                break;
            case 9:
                cout << "Exiting..." << endl;
                break;
            default:
                cout << "Invalid choice! Please try again." << endl;
        }

    } while (choice != 9);

    return 0;
}
